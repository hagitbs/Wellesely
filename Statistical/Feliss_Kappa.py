import numpy as np
#from fleiss_kappa import fleiss_kappa, transform, tranform2

 
from scipy.stats import norm

def fleiss_kappa(data: np.array):
    """
    Calculates Fleiss' kappa coefficient for inter-rater agreement.

    Args:
        data: numpy array of shape (subjects, categories), where each element represents
              the number of raters who assigned a particular category to a subject.

    Returns:
        kappa: Fleiss' kappa coefficient.
    """
    subjects, categories = data.shape
    n_rater = np.sum(data[0])

    p_j = np.sum(data, axis=0) / (n_rater * subjects)
    P_e_bar = np.sum(p_j ** 2)

    P_i = (np.sum(data ** 2, axis=1) - n_rater) / (n_rater * (n_rater - 1))
    P_bar = np.mean(P_i)

    K = (P_bar - P_e_bar) / (1 - P_e_bar)

    tmp = (1 - P_e_bar) ** 2
    var = 2 * (tmp - np.sum(p_j * (1 - p_j) * (1 - 2 * p_j))) / (tmp * subjects * n_rater * (n_rater - 1))
    
    # standard error
    SE = np.sqrt(var) 

    Z = K / SE

    p_value = 2 * (1 - norm.cdf(np.abs(Z)))

    ci_bound = 1.96 * SE / subjects
    lower_ci_bound = K - ci_bound
    upper_ci_bound = K + ci_bound

    print("Fleiss Kappa: {:.3f}".format(K))
    print("Standard Error: {:.3f}".format(SE))
    print("Z: {:.3f}".format(Z))
    print("p-value: {:.3f}".format(p_value))
    print("Lower 95% CI Bound: {:.3f}".format(lower_ci_bound))
    print("Upper 95% CI Bound: {:.3f}".format(upper_ci_bound))
    print()

rel = np.array(
   [[0,0,0,6,23],
    [0,0,0,5,24],
    [0,0,0,9,19],
    [0,0,0,8,20],
    [0,0,0,8,20],
    [0,5,18,6,0],
    [0,0,0,8,20],
    [0,0,0,6,23],
    [0,0,1,17,11],
    [0,25,4,0,0],
    [0,0,4,25,0],
    [0,0,0,2,27],
    [0,4,17,8,0],
    [0,0,1,22,6],
    [0,0,6,20,3],
    [0,3,17,9,0],
    [0,1,14,13,1],
    [0,2,9,11,7],
    [0,0,2,25,2],
    [0,0,4,11,13],
    [0,0,0,17,12],
    [0,0,10,18,1],
    [0,0,10,19,0],
    [0,0,0,14,15],
    [0,0,0,8,20],
    [0,0,0,18,11],
    [0,0,0,11,18],
    [0,0,1,18,10],
    [0,0,0,3,26],
    [0,0,10,19,0],
    [0,0,1,5,22],
    [0,0,1,3,24],
    [0,0,0,0,29],
    [0,0,0,7,21],
    [0,0,0,8,21],
    [0,0,0,9,20],
    [0,0,0,5,24],
    [0,0,0,5,24],
    [0,0,8,21,0],
    [0,5,21,3,0],
    [0,0,0,13,16],
    [1,22,6,0,0],
    [0,0,0,4,25],
    [0,0,5,21,3],
    [0,0,0,6,23],
    [0,0,0,8,21],
    [0,0,0,17,12],
    [0,1,25,3,0],
    [0,0,0,5,24],
    [0,0,1,26,2],
    [0,0,1,14,14],
    [0,0,0,19,10],
    [0,0,4,13,12],
    [0,1,10,18,0],
    [0,8,19,2,0],
    [0,0,5,24,0],
    [0,0,0,3,26],
    [0,0,0,11,18],
    [0,0,0,9,19],
    [0,0,0,6,22],
    [0,0,3,22,4],
    [0,0,0,18,11],
    [0,0,1,23,5],
    [0,0,10,19,0],
    [0,0,0,2,27],
    [0,0,0,12,16],
    [0,0,0,16,12],
    [0,0,0,19,9],
    [0,0,7,21,1],
    [0,0,4,15,10],
    [0,0,0,9,20],
    [0,0,0,1,28],
    [0,0,0,20,9],
    [0,0,0,11,18],
    [0,0,1,26,2],
    [0,0,0,19,9],
    [0,0,0,4,25],
    [0,0,3,19,7],
    [0,5,22,2,0],
    [0,0,0,22,7],
    [0,0,7,22,0],
    [0,0,13,14,2],
    [0,0,11,16,2],
    [0,0,10,15,4],
    [0,0,0,5,24],
    [0,0,0,0,29],
    [0,24,5,0,0],
    [0,0,23,6,0],
    [0,0,0,13,16],
    [0,0,0,9,20],
    [0,0,0,7,21],
    [0,0,1,20,8],
    [0,0,0,1,28],
    [0,0,1,17,11],
    [0,16,13,0,0],
    [0,0,3,21,5],
    [0,0,0,12,17],
    [0,0,0,12,17],
    [0,0,0,20,8],
    [0,0,0,11,17],
    [0,0,13,16,0],
    [0,0,0,3,26],
    [0,0,0,8,20],
    [0,0,0,12,17],
    [0,0,0,11,17],
    [0,0,0,21,7],
    [0,1,10,17,1],
    [0,21,6,2,0],
    [0,0,0,9,19],
    [0,0,19,10,0],
    [0,0,0,4,25],
    [0,0,2,26,1],
    [0,2,25,2,0],
    [0,0,1,6,21],
    [0,0,0,5,24],
    [0,0,0,13,15],
    [0,0,7,21,1],
    [0,6,20,3,0],
    [0,0,9,20,0],
    [0,0,7,22,0],
    [0,0,0,13,16],
    [0,0,0,2,27],
    [0,0,0,10,19],
    [0,0,0,5,23],
    [0,0,1,19,9]])
   
print(rel) 
fleiss_kappa(rel) 

ins = np.array([[0,0,0,12,17],
[0,0,0,17,0],
[0,0,7,21,0],
[0,0,2,11,15],
[0,0,5,17,6],
[0,4,14,11,0],
[0,0,3,10,15],
[0,0,1,17,11],
[0,1,14,13,1],
[2,26,10,0,0],
[0,0,23,6,0],
[0,0,0,20,9],
[0,3,13,13,0],
[0,0,2,21,6],
[0,0,7,20,2],
[0,2,13,14,0],
[0,11,17,1,0],
[0,8,14,7,0],
[0,0,6,22,1],
[0,2,9,11,6],
[0,0,12,17,0],
[0,5,18,6,0],
[0,3,23,3,0],
[0,0,8,19,2],
[0,0,5,13,10],
[0,0,1,19,9],
[0,0,6,15,8],
[0,0,9,13,7],
[0,0,9,20,0],
[0,7,22,0,0],
[0,0,3,20,5],
[0,1,4,19,4],
[0,0,0,7,22],
[0,0,1,7,20],
[0,0,1,20,8],
[0,0,7,17,5],
[0,0,0,21,8],
[0,0,0,12,17],
[0,1,27,1,0],
[0,11,16,2,0],
[0,0,7,21,1],
[2,26,10,0,0],
[0,0,0,20,9],
[0,0,6,19,4],
[0,0,4,24,1],
[0,0,6,23,0],
[0,0,1,20,8],
[0,4,23,2,0],
[0,0,1,15,13],
[0,0,18,11,0],
[0,0,7,20,2],
[0,0,2,22,5],
[0,0,14,13,2],
[0,0,12,17,0],
[1,16,12,0,0],
[0,0,13,15,1],
[0,0,0,15,14],
[0,0,7,21,1],
[0,0,6,16,6],
[0,0,2,13,13],
[0,1,18,10,0],
[0,0,5,21,3],
[0,0,13,16,0],
[0,1,16,12,0],
[0,0,0,26,3],
[0,0,1,15,12],
[0,0,8,20,0],
[0,0,1,21,6],
[0,2,19,8,0],
[0,0,13,16,0],
[0,0,0,20,9],
[0,0,0,25,4],
[0,0,13,15,1],
[0,0,9,20,0],
[0,0,0,28,1],
[0,0,11,16,1],
[0,0,0,26,3],
[0,1,17,11,0],
[0,6,22,1,0],
[0,0,16,13,0],
[0,2,23,4,0],
[0,3,16,10,0],
[0,3,13,12,1],
[0,0,20,8,1],
[0,0,2,17,10],
[0,0,0,22,7],
[0,22,7,0,0],
[0,2,19,8,0],
[0,0,4,22,3],
[0,0,14,15,0],
[0,0,3,13,12],
[0,1,15,12,1],
[0,0,1,26,2],
[0,0,3,18,8],
[1,27,10,0,0],
[0,0,10,18,1],
[0,0,0,19,10],
[0,0,7,22,0],
[0,0,19,9,0],
[0,0,15,13,0],
[0,1,21,7,0],
[0,0,8,20,1],
[0,0,4,13,11],
[0,1,17,11,0],
[0,0,6,22,0],
[0,0,8,18,2],
[0,12,16,1,0],
[1,25,2,1,0],
[0,0,4,21,3],
[0,1,25,3,0],
[0,0,3,25,1],
[0,0,7,18,4],
[0,14,15,0,0],
[0,1,6,20,1],
[0,0,3,23,3],
[0,0,8,19,1],
[0,2,21,6,0],
[0,8,20,1,0],
[0,1,9,19,0],
[0,0,13,16,0],
[0,0,3,22,4],
[0,0,0,17,12],
[0,0,3,22,4],
[0,0,5,20,3],
[0,0,5,21,3]]) 

   
print(ins) 
fleiss_kappa(ins) 

import numpy as np
import csv

# Open the CSV file for reading
with open('/Users/hagitbenshoshan/Documents/Wellesley/Wellesely/Statistical/rel.csv', 'r') as file:
    # Use csv.reader to read the CSV file into a list of lists
    csv_reader = csv.reader(file)
    data_list = list(csv_reader)

# Convert the list of lists into a NumPy array
data_array = np.array(data_list)

# Now you can work with the data as a NumPy array
print(data_array)
 
import pandas as pd
import numpy as np
from scipy import stats 
